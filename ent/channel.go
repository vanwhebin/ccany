// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/channel"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Channel display name
	Name string `json:"name,omitempty"`
	// API provider: openai, anthropic, gemini
	Provider string `json:"provider,omitempty"`
	// API base URL
	BaseURL string `json:"base_url,omitempty"`
	// API key for the provider
	APIKey string `json:"-"`
	// Custom key for users to access this channel
	CustomKey string `json:"custom_key,omitempty"`
	// Request timeout in seconds
	Timeout int `json:"timeout,omitempty"`
	// Maximum retry attempts
	MaxRetries int `json:"max_retries,omitempty"`
	// Whether the channel is enabled
	Enabled bool `json:"enabled,omitempty"`
	// Load balancing weight
	Weight int `json:"weight,omitempty"`
	// Channel priority (higher is better)
	Priority int `json:"priority,omitempty"`
	// Model name mappings
	ModelsMapping map[string]string `json:"models_mapping,omitempty"`
	// Detected capabilities
	Capabilities map[string]interface{} `json:"capabilities,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Last time this channel was used
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// Total number of requests
	RequestCount int64 `json:"request_count,omitempty"`
	// Total number of errors
	ErrorCount int64 `json:"error_count,omitempty"`
	// Success rate (0.0 to 1.0)
	SuccessRate float64 `json:"success_rate,omitempty"`
	// Total tokens processed
	TotalTokens int64 `json:"total_tokens,omitempty"`
	// Average response time in seconds
	AvgResponseTime float64 `json:"avg_response_time,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldModelsMapping, channel.FieldCapabilities:
			values[i] = new([]byte)
		case channel.FieldEnabled:
			values[i] = new(sql.NullBool)
		case channel.FieldSuccessRate, channel.FieldAvgResponseTime:
			values[i] = new(sql.NullFloat64)
		case channel.FieldTimeout, channel.FieldMaxRetries, channel.FieldWeight, channel.FieldPriority, channel.FieldRequestCount, channel.FieldErrorCount, channel.FieldTotalTokens:
			values[i] = new(sql.NullInt64)
		case channel.FieldID, channel.FieldName, channel.FieldProvider, channel.FieldBaseURL, channel.FieldAPIKey, channel.FieldCustomKey:
			values[i] = new(sql.NullString)
		case channel.FieldCreatedAt, channel.FieldUpdatedAt, channel.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case channel.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				c.Provider = value.String
			}
		case channel.FieldBaseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_url", values[i])
			} else if value.Valid {
				c.BaseURL = value.String
			}
		case channel.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				c.APIKey = value.String
			}
		case channel.FieldCustomKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_key", values[i])
			} else if value.Valid {
				c.CustomKey = value.String
			}
		case channel.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				c.Timeout = int(value.Int64)
			}
		case channel.FieldMaxRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retries", values[i])
			} else if value.Valid {
				c.MaxRetries = int(value.Int64)
			}
		case channel.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				c.Enabled = value.Bool
			}
		case channel.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				c.Weight = int(value.Int64)
			}
		case channel.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				c.Priority = int(value.Int64)
			}
		case channel.FieldModelsMapping:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field models_mapping", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ModelsMapping); err != nil {
					return fmt.Errorf("unmarshal field models_mapping: %w", err)
				}
			}
		case channel.FieldCapabilities:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field capabilities", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Capabilities); err != nil {
					return fmt.Errorf("unmarshal field capabilities: %w", err)
				}
			}
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case channel.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				c.LastUsedAt = new(time.Time)
				*c.LastUsedAt = value.Time
			}
		case channel.FieldRequestCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_count", values[i])
			} else if value.Valid {
				c.RequestCount = value.Int64
			}
		case channel.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				c.ErrorCount = value.Int64
			}
		case channel.FieldSuccessRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field success_rate", values[i])
			} else if value.Valid {
				c.SuccessRate = value.Float64
			}
		case channel.FieldTotalTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_tokens", values[i])
			} else if value.Valid {
				c.TotalTokens = value.Int64
			}
		case channel.FieldAvgResponseTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_response_time", values[i])
			} else if value.Valid {
				c.AvgResponseTime = value.Float64
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Channel.
// This includes values selected through modifiers, order, etc.
func (c *Channel) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(c.Provider)
	builder.WriteString(", ")
	builder.WriteString("base_url=")
	builder.WriteString(c.BaseURL)
	builder.WriteString(", ")
	builder.WriteString("api_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("custom_key=")
	builder.WriteString(c.CustomKey)
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", c.Timeout))
	builder.WriteString(", ")
	builder.WriteString("max_retries=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxRetries))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", c.Enabled))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", c.Weight))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", c.Priority))
	builder.WriteString(", ")
	builder.WriteString("models_mapping=")
	builder.WriteString(fmt.Sprintf("%v", c.ModelsMapping))
	builder.WriteString(", ")
	builder.WriteString("capabilities=")
	builder.WriteString(fmt.Sprintf("%v", c.Capabilities))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("request_count=")
	builder.WriteString(fmt.Sprintf("%v", c.RequestCount))
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", c.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("success_rate=")
	builder.WriteString(fmt.Sprintf("%v", c.SuccessRate))
	builder.WriteString(", ")
	builder.WriteString("total_tokens=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalTokens))
	builder.WriteString(", ")
	builder.WriteString("avg_response_time=")
	builder.WriteString(fmt.Sprintf("%v", c.AvgResponseTime))
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel
