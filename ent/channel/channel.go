// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the channel type in the database.
	Label = "channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldBaseURL holds the string denoting the base_url field in the database.
	FieldBaseURL = "base_url"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldCustomKey holds the string denoting the custom_key field in the database.
	FieldCustomKey = "custom_key"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldMaxRetries holds the string denoting the max_retries field in the database.
	FieldMaxRetries = "max_retries"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldModelsMapping holds the string denoting the models_mapping field in the database.
	FieldModelsMapping = "models_mapping"
	// FieldCapabilities holds the string denoting the capabilities field in the database.
	FieldCapabilities = "capabilities"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// FieldRequestCount holds the string denoting the request_count field in the database.
	FieldRequestCount = "request_count"
	// FieldErrorCount holds the string denoting the error_count field in the database.
	FieldErrorCount = "error_count"
	// FieldSuccessRate holds the string denoting the success_rate field in the database.
	FieldSuccessRate = "success_rate"
	// FieldTotalTokens holds the string denoting the total_tokens field in the database.
	FieldTotalTokens = "total_tokens"
	// FieldAvgResponseTime holds the string denoting the avg_response_time field in the database.
	FieldAvgResponseTime = "avg_response_time"
	// Table holds the table name of the channel in the database.
	Table = "channels"
)

// Columns holds all SQL columns for channel fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldProvider,
	FieldBaseURL,
	FieldAPIKey,
	FieldCustomKey,
	FieldTimeout,
	FieldMaxRetries,
	FieldEnabled,
	FieldWeight,
	FieldPriority,
	FieldModelsMapping,
	FieldCapabilities,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastUsedAt,
	FieldRequestCount,
	FieldErrorCount,
	FieldSuccessRate,
	FieldTotalTokens,
	FieldAvgResponseTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimeout holds the default value on creation for the "timeout" field.
	DefaultTimeout int
	// DefaultMaxRetries holds the default value on creation for the "max_retries" field.
	DefaultMaxRetries int
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRequestCount holds the default value on creation for the "request_count" field.
	DefaultRequestCount int64
	// DefaultErrorCount holds the default value on creation for the "error_count" field.
	DefaultErrorCount int64
	// DefaultSuccessRate holds the default value on creation for the "success_rate" field.
	DefaultSuccessRate float64
	// DefaultTotalTokens holds the default value on creation for the "total_tokens" field.
	DefaultTotalTokens int64
	// DefaultAvgResponseTime holds the default value on creation for the "avg_response_time" field.
	DefaultAvgResponseTime float64
)

// OrderOption defines the ordering options for the Channel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByBaseURL orders the results by the base_url field.
func ByBaseURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseURL, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByCustomKey orders the results by the custom_key field.
func ByCustomKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomKey, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByMaxRetries orders the results by the max_retries field.
func ByMaxRetries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxRetries, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByRequestCount orders the results by the request_count field.
func ByRequestCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestCount, opts...).ToFunc()
}

// ByErrorCount orders the results by the error_count field.
func ByErrorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorCount, opts...).ToFunc()
}

// BySuccessRate orders the results by the success_rate field.
func BySuccessRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessRate, opts...).ToFunc()
}

// ByTotalTokens orders the results by the total_tokens field.
func ByTotalTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTokens, opts...).ToFunc()
}

// ByAvgResponseTime orders the results by the avg_response_time field.
func ByAvgResponseTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgResponseTime, opts...).ToFunc()
}
