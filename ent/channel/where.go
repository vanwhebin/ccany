// Code generated by ent, DO NOT EDIT.

package channel

import (
	"ccany/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldName, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldProvider, v))
}

// BaseURL applies equality check predicate on the "base_url" field. It's identical to BaseURLEQ.
func BaseURL(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldBaseURL, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldAPIKey, v))
}

// CustomKey applies equality check predicate on the "custom_key" field. It's identical to CustomKeyEQ.
func CustomKey(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCustomKey, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldTimeout, v))
}

// MaxRetries applies equality check predicate on the "max_retries" field. It's identical to MaxRetriesEQ.
func MaxRetries(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldMaxRetries, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldEnabled, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldWeight, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldPriority, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldLastUsedAt, v))
}

// RequestCount applies equality check predicate on the "request_count" field. It's identical to RequestCountEQ.
func RequestCount(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldRequestCount, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldErrorCount, v))
}

// SuccessRate applies equality check predicate on the "success_rate" field. It's identical to SuccessRateEQ.
func SuccessRate(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldSuccessRate, v))
}

// TotalTokens applies equality check predicate on the "total_tokens" field. It's identical to TotalTokensEQ.
func TotalTokens(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldTotalTokens, v))
}

// AvgResponseTime applies equality check predicate on the "avg_response_time" field. It's identical to AvgResponseTimeEQ.
func AvgResponseTime(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldAvgResponseTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldName, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldProvider, v))
}

// BaseURLEQ applies the EQ predicate on the "base_url" field.
func BaseURLEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldBaseURL, v))
}

// BaseURLNEQ applies the NEQ predicate on the "base_url" field.
func BaseURLNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldBaseURL, v))
}

// BaseURLIn applies the In predicate on the "base_url" field.
func BaseURLIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldBaseURL, vs...))
}

// BaseURLNotIn applies the NotIn predicate on the "base_url" field.
func BaseURLNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldBaseURL, vs...))
}

// BaseURLGT applies the GT predicate on the "base_url" field.
func BaseURLGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldBaseURL, v))
}

// BaseURLGTE applies the GTE predicate on the "base_url" field.
func BaseURLGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldBaseURL, v))
}

// BaseURLLT applies the LT predicate on the "base_url" field.
func BaseURLLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldBaseURL, v))
}

// BaseURLLTE applies the LTE predicate on the "base_url" field.
func BaseURLLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldBaseURL, v))
}

// BaseURLContains applies the Contains predicate on the "base_url" field.
func BaseURLContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldBaseURL, v))
}

// BaseURLHasPrefix applies the HasPrefix predicate on the "base_url" field.
func BaseURLHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldBaseURL, v))
}

// BaseURLHasSuffix applies the HasSuffix predicate on the "base_url" field.
func BaseURLHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldBaseURL, v))
}

// BaseURLEqualFold applies the EqualFold predicate on the "base_url" field.
func BaseURLEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldBaseURL, v))
}

// BaseURLContainsFold applies the ContainsFold predicate on the "base_url" field.
func BaseURLContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldBaseURL, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldAPIKey, v))
}

// CustomKeyEQ applies the EQ predicate on the "custom_key" field.
func CustomKeyEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCustomKey, v))
}

// CustomKeyNEQ applies the NEQ predicate on the "custom_key" field.
func CustomKeyNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldCustomKey, v))
}

// CustomKeyIn applies the In predicate on the "custom_key" field.
func CustomKeyIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldCustomKey, vs...))
}

// CustomKeyNotIn applies the NotIn predicate on the "custom_key" field.
func CustomKeyNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldCustomKey, vs...))
}

// CustomKeyGT applies the GT predicate on the "custom_key" field.
func CustomKeyGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldCustomKey, v))
}

// CustomKeyGTE applies the GTE predicate on the "custom_key" field.
func CustomKeyGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldCustomKey, v))
}

// CustomKeyLT applies the LT predicate on the "custom_key" field.
func CustomKeyLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldCustomKey, v))
}

// CustomKeyLTE applies the LTE predicate on the "custom_key" field.
func CustomKeyLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldCustomKey, v))
}

// CustomKeyContains applies the Contains predicate on the "custom_key" field.
func CustomKeyContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldCustomKey, v))
}

// CustomKeyHasPrefix applies the HasPrefix predicate on the "custom_key" field.
func CustomKeyHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldCustomKey, v))
}

// CustomKeyHasSuffix applies the HasSuffix predicate on the "custom_key" field.
func CustomKeyHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldCustomKey, v))
}

// CustomKeyEqualFold applies the EqualFold predicate on the "custom_key" field.
func CustomKeyEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldCustomKey, v))
}

// CustomKeyContainsFold applies the ContainsFold predicate on the "custom_key" field.
func CustomKeyContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldCustomKey, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldTimeout, v))
}

// MaxRetriesEQ applies the EQ predicate on the "max_retries" field.
func MaxRetriesEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldMaxRetries, v))
}

// MaxRetriesNEQ applies the NEQ predicate on the "max_retries" field.
func MaxRetriesNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldMaxRetries, v))
}

// MaxRetriesIn applies the In predicate on the "max_retries" field.
func MaxRetriesIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldMaxRetries, vs...))
}

// MaxRetriesNotIn applies the NotIn predicate on the "max_retries" field.
func MaxRetriesNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldMaxRetries, vs...))
}

// MaxRetriesGT applies the GT predicate on the "max_retries" field.
func MaxRetriesGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldMaxRetries, v))
}

// MaxRetriesGTE applies the GTE predicate on the "max_retries" field.
func MaxRetriesGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldMaxRetries, v))
}

// MaxRetriesLT applies the LT predicate on the "max_retries" field.
func MaxRetriesLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldMaxRetries, v))
}

// MaxRetriesLTE applies the LTE predicate on the "max_retries" field.
func MaxRetriesLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldMaxRetries, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldEnabled, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldWeight, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldPriority, v))
}

// ModelsMappingIsNil applies the IsNil predicate on the "models_mapping" field.
func ModelsMappingIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldModelsMapping))
}

// ModelsMappingNotNil applies the NotNil predicate on the "models_mapping" field.
func ModelsMappingNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldModelsMapping))
}

// CapabilitiesIsNil applies the IsNil predicate on the "capabilities" field.
func CapabilitiesIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldCapabilities))
}

// CapabilitiesNotNil applies the NotNil predicate on the "capabilities" field.
func CapabilitiesNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldCapabilities))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldLastUsedAt))
}

// RequestCountEQ applies the EQ predicate on the "request_count" field.
func RequestCountEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldRequestCount, v))
}

// RequestCountNEQ applies the NEQ predicate on the "request_count" field.
func RequestCountNEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldRequestCount, v))
}

// RequestCountIn applies the In predicate on the "request_count" field.
func RequestCountIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldRequestCount, vs...))
}

// RequestCountNotIn applies the NotIn predicate on the "request_count" field.
func RequestCountNotIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldRequestCount, vs...))
}

// RequestCountGT applies the GT predicate on the "request_count" field.
func RequestCountGT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldRequestCount, v))
}

// RequestCountGTE applies the GTE predicate on the "request_count" field.
func RequestCountGTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldRequestCount, v))
}

// RequestCountLT applies the LT predicate on the "request_count" field.
func RequestCountLT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldRequestCount, v))
}

// RequestCountLTE applies the LTE predicate on the "request_count" field.
func RequestCountLTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldRequestCount, v))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldErrorCount, v))
}

// SuccessRateEQ applies the EQ predicate on the "success_rate" field.
func SuccessRateEQ(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldSuccessRate, v))
}

// SuccessRateNEQ applies the NEQ predicate on the "success_rate" field.
func SuccessRateNEQ(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldSuccessRate, v))
}

// SuccessRateIn applies the In predicate on the "success_rate" field.
func SuccessRateIn(vs ...float64) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldSuccessRate, vs...))
}

// SuccessRateNotIn applies the NotIn predicate on the "success_rate" field.
func SuccessRateNotIn(vs ...float64) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldSuccessRate, vs...))
}

// SuccessRateGT applies the GT predicate on the "success_rate" field.
func SuccessRateGT(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldSuccessRate, v))
}

// SuccessRateGTE applies the GTE predicate on the "success_rate" field.
func SuccessRateGTE(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldSuccessRate, v))
}

// SuccessRateLT applies the LT predicate on the "success_rate" field.
func SuccessRateLT(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldSuccessRate, v))
}

// SuccessRateLTE applies the LTE predicate on the "success_rate" field.
func SuccessRateLTE(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldSuccessRate, v))
}

// TotalTokensEQ applies the EQ predicate on the "total_tokens" field.
func TotalTokensEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldTotalTokens, v))
}

// TotalTokensNEQ applies the NEQ predicate on the "total_tokens" field.
func TotalTokensNEQ(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldTotalTokens, v))
}

// TotalTokensIn applies the In predicate on the "total_tokens" field.
func TotalTokensIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldTotalTokens, vs...))
}

// TotalTokensNotIn applies the NotIn predicate on the "total_tokens" field.
func TotalTokensNotIn(vs ...int64) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldTotalTokens, vs...))
}

// TotalTokensGT applies the GT predicate on the "total_tokens" field.
func TotalTokensGT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldTotalTokens, v))
}

// TotalTokensGTE applies the GTE predicate on the "total_tokens" field.
func TotalTokensGTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldTotalTokens, v))
}

// TotalTokensLT applies the LT predicate on the "total_tokens" field.
func TotalTokensLT(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldTotalTokens, v))
}

// TotalTokensLTE applies the LTE predicate on the "total_tokens" field.
func TotalTokensLTE(v int64) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldTotalTokens, v))
}

// AvgResponseTimeEQ applies the EQ predicate on the "avg_response_time" field.
func AvgResponseTimeEQ(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldAvgResponseTime, v))
}

// AvgResponseTimeNEQ applies the NEQ predicate on the "avg_response_time" field.
func AvgResponseTimeNEQ(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldAvgResponseTime, v))
}

// AvgResponseTimeIn applies the In predicate on the "avg_response_time" field.
func AvgResponseTimeIn(vs ...float64) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldAvgResponseTime, vs...))
}

// AvgResponseTimeNotIn applies the NotIn predicate on the "avg_response_time" field.
func AvgResponseTimeNotIn(vs ...float64) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldAvgResponseTime, vs...))
}

// AvgResponseTimeGT applies the GT predicate on the "avg_response_time" field.
func AvgResponseTimeGT(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldAvgResponseTime, v))
}

// AvgResponseTimeGTE applies the GTE predicate on the "avg_response_time" field.
func AvgResponseTimeGTE(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldAvgResponseTime, v))
}

// AvgResponseTimeLT applies the LT predicate on the "avg_response_time" field.
func AvgResponseTimeLT(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldAvgResponseTime, v))
}

// AvgResponseTimeLTE applies the LTE predicate on the "avg_response_time" field.
func AvgResponseTimeLTE(v float64) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldAvgResponseTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.NotPredicates(p))
}
