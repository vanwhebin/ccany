// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/channel"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelCreate is the builder for creating a Channel entity.
type ChannelCreate struct {
	config
	mutation *ChannelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ChannelCreate) SetName(s string) *ChannelCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetProvider sets the "provider" field.
func (cc *ChannelCreate) SetProvider(s string) *ChannelCreate {
	cc.mutation.SetProvider(s)
	return cc
}

// SetBaseURL sets the "base_url" field.
func (cc *ChannelCreate) SetBaseURL(s string) *ChannelCreate {
	cc.mutation.SetBaseURL(s)
	return cc
}

// SetAPIKey sets the "api_key" field.
func (cc *ChannelCreate) SetAPIKey(s string) *ChannelCreate {
	cc.mutation.SetAPIKey(s)
	return cc
}

// SetCustomKey sets the "custom_key" field.
func (cc *ChannelCreate) SetCustomKey(s string) *ChannelCreate {
	cc.mutation.SetCustomKey(s)
	return cc
}

// SetTimeout sets the "timeout" field.
func (cc *ChannelCreate) SetTimeout(i int) *ChannelCreate {
	cc.mutation.SetTimeout(i)
	return cc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableTimeout(i *int) *ChannelCreate {
	if i != nil {
		cc.SetTimeout(*i)
	}
	return cc
}

// SetMaxRetries sets the "max_retries" field.
func (cc *ChannelCreate) SetMaxRetries(i int) *ChannelCreate {
	cc.mutation.SetMaxRetries(i)
	return cc
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMaxRetries(i *int) *ChannelCreate {
	if i != nil {
		cc.SetMaxRetries(*i)
	}
	return cc
}

// SetEnabled sets the "enabled" field.
func (cc *ChannelCreate) SetEnabled(b bool) *ChannelCreate {
	cc.mutation.SetEnabled(b)
	return cc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableEnabled(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetEnabled(*b)
	}
	return cc
}

// SetWeight sets the "weight" field.
func (cc *ChannelCreate) SetWeight(i int) *ChannelCreate {
	cc.mutation.SetWeight(i)
	return cc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableWeight(i *int) *ChannelCreate {
	if i != nil {
		cc.SetWeight(*i)
	}
	return cc
}

// SetPriority sets the "priority" field.
func (cc *ChannelCreate) SetPriority(i int) *ChannelCreate {
	cc.mutation.SetPriority(i)
	return cc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cc *ChannelCreate) SetNillablePriority(i *int) *ChannelCreate {
	if i != nil {
		cc.SetPriority(*i)
	}
	return cc
}

// SetModelsMapping sets the "models_mapping" field.
func (cc *ChannelCreate) SetModelsMapping(m map[string]string) *ChannelCreate {
	cc.mutation.SetModelsMapping(m)
	return cc
}

// SetCapabilities sets the "capabilities" field.
func (cc *ChannelCreate) SetCapabilities(m map[string]interface{}) *ChannelCreate {
	cc.mutation.SetCapabilities(m)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChannelCreate) SetCreatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableCreatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChannelCreate) SetUpdatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableUpdatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetLastUsedAt sets the "last_used_at" field.
func (cc *ChannelCreate) SetLastUsedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetLastUsedAt(t)
	return cc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableLastUsedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetLastUsedAt(*t)
	}
	return cc
}

// SetRequestCount sets the "request_count" field.
func (cc *ChannelCreate) SetRequestCount(i int64) *ChannelCreate {
	cc.mutation.SetRequestCount(i)
	return cc
}

// SetNillableRequestCount sets the "request_count" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableRequestCount(i *int64) *ChannelCreate {
	if i != nil {
		cc.SetRequestCount(*i)
	}
	return cc
}

// SetErrorCount sets the "error_count" field.
func (cc *ChannelCreate) SetErrorCount(i int64) *ChannelCreate {
	cc.mutation.SetErrorCount(i)
	return cc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableErrorCount(i *int64) *ChannelCreate {
	if i != nil {
		cc.SetErrorCount(*i)
	}
	return cc
}

// SetSuccessRate sets the "success_rate" field.
func (cc *ChannelCreate) SetSuccessRate(f float64) *ChannelCreate {
	cc.mutation.SetSuccessRate(f)
	return cc
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableSuccessRate(f *float64) *ChannelCreate {
	if f != nil {
		cc.SetSuccessRate(*f)
	}
	return cc
}

// SetTotalTokens sets the "total_tokens" field.
func (cc *ChannelCreate) SetTotalTokens(i int64) *ChannelCreate {
	cc.mutation.SetTotalTokens(i)
	return cc
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableTotalTokens(i *int64) *ChannelCreate {
	if i != nil {
		cc.SetTotalTokens(*i)
	}
	return cc
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (cc *ChannelCreate) SetAvgResponseTime(f float64) *ChannelCreate {
	cc.mutation.SetAvgResponseTime(f)
	return cc
}

// SetNillableAvgResponseTime sets the "avg_response_time" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableAvgResponseTime(f *float64) *ChannelCreate {
	if f != nil {
		cc.SetAvgResponseTime(*f)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChannelCreate) SetID(s string) *ChannelCreate {
	cc.mutation.SetID(s)
	return cc
}

// Mutation returns the ChannelMutation object of the builder.
func (cc *ChannelCreate) Mutation() *ChannelMutation {
	return cc.mutation
}

// Save creates the Channel in the database.
func (cc *ChannelCreate) Save(ctx context.Context) (*Channel, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChannelCreate) SaveX(ctx context.Context) *Channel {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChannelCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChannelCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChannelCreate) defaults() {
	if _, ok := cc.mutation.Timeout(); !ok {
		v := channel.DefaultTimeout
		cc.mutation.SetTimeout(v)
	}
	if _, ok := cc.mutation.MaxRetries(); !ok {
		v := channel.DefaultMaxRetries
		cc.mutation.SetMaxRetries(v)
	}
	if _, ok := cc.mutation.Enabled(); !ok {
		v := channel.DefaultEnabled
		cc.mutation.SetEnabled(v)
	}
	if _, ok := cc.mutation.Weight(); !ok {
		v := channel.DefaultWeight
		cc.mutation.SetWeight(v)
	}
	if _, ok := cc.mutation.Priority(); !ok {
		v := channel.DefaultPriority
		cc.mutation.SetPriority(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := channel.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := channel.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.RequestCount(); !ok {
		v := channel.DefaultRequestCount
		cc.mutation.SetRequestCount(v)
	}
	if _, ok := cc.mutation.ErrorCount(); !ok {
		v := channel.DefaultErrorCount
		cc.mutation.SetErrorCount(v)
	}
	if _, ok := cc.mutation.SuccessRate(); !ok {
		v := channel.DefaultSuccessRate
		cc.mutation.SetSuccessRate(v)
	}
	if _, ok := cc.mutation.TotalTokens(); !ok {
		v := channel.DefaultTotalTokens
		cc.mutation.SetTotalTokens(v)
	}
	if _, ok := cc.mutation.AvgResponseTime(); !ok {
		v := channel.DefaultAvgResponseTime
		cc.mutation.SetAvgResponseTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChannelCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Channel.name"`)}
	}
	if _, ok := cc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "Channel.provider"`)}
	}
	if _, ok := cc.mutation.BaseURL(); !ok {
		return &ValidationError{Name: "base_url", err: errors.New(`ent: missing required field "Channel.base_url"`)}
	}
	if _, ok := cc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "Channel.api_key"`)}
	}
	if _, ok := cc.mutation.CustomKey(); !ok {
		return &ValidationError{Name: "custom_key", err: errors.New(`ent: missing required field "Channel.custom_key"`)}
	}
	if _, ok := cc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "Channel.timeout"`)}
	}
	if _, ok := cc.mutation.MaxRetries(); !ok {
		return &ValidationError{Name: "max_retries", err: errors.New(`ent: missing required field "Channel.max_retries"`)}
	}
	if _, ok := cc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "Channel.enabled"`)}
	}
	if _, ok := cc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Channel.weight"`)}
	}
	if _, ok := cc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Channel.priority"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Channel.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Channel.updated_at"`)}
	}
	if _, ok := cc.mutation.RequestCount(); !ok {
		return &ValidationError{Name: "request_count", err: errors.New(`ent: missing required field "Channel.request_count"`)}
	}
	if _, ok := cc.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "Channel.error_count"`)}
	}
	if _, ok := cc.mutation.SuccessRate(); !ok {
		return &ValidationError{Name: "success_rate", err: errors.New(`ent: missing required field "Channel.success_rate"`)}
	}
	if _, ok := cc.mutation.TotalTokens(); !ok {
		return &ValidationError{Name: "total_tokens", err: errors.New(`ent: missing required field "Channel.total_tokens"`)}
	}
	if _, ok := cc.mutation.AvgResponseTime(); !ok {
		return &ValidationError{Name: "avg_response_time", err: errors.New(`ent: missing required field "Channel.avg_response_time"`)}
	}
	return nil
}

func (cc *ChannelCreate) sqlSave(ctx context.Context) (*Channel, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Channel.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChannelCreate) createSpec() (*Channel, *sqlgraph.CreateSpec) {
	var (
		_node = &Channel{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(channel.Table, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Provider(); ok {
		_spec.SetField(channel.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := cc.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
		_node.BaseURL = value
	}
	if value, ok := cc.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := cc.mutation.CustomKey(); ok {
		_spec.SetField(channel.FieldCustomKey, field.TypeString, value)
		_node.CustomKey = value
	}
	if value, ok := cc.mutation.Timeout(); ok {
		_spec.SetField(channel.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := cc.mutation.MaxRetries(); ok {
		_spec.SetField(channel.FieldMaxRetries, field.TypeInt, value)
		_node.MaxRetries = value
	}
	if value, ok := cc.mutation.Enabled(); ok {
		_spec.SetField(channel.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := cc.mutation.Weight(); ok {
		_spec.SetField(channel.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := cc.mutation.Priority(); ok {
		_spec.SetField(channel.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := cc.mutation.ModelsMapping(); ok {
		_spec.SetField(channel.FieldModelsMapping, field.TypeJSON, value)
		_node.ModelsMapping = value
	}
	if value, ok := cc.mutation.Capabilities(); ok {
		_spec.SetField(channel.FieldCapabilities, field.TypeJSON, value)
		_node.Capabilities = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.LastUsedAt(); ok {
		_spec.SetField(channel.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = &value
	}
	if value, ok := cc.mutation.RequestCount(); ok {
		_spec.SetField(channel.FieldRequestCount, field.TypeInt64, value)
		_node.RequestCount = value
	}
	if value, ok := cc.mutation.ErrorCount(); ok {
		_spec.SetField(channel.FieldErrorCount, field.TypeInt64, value)
		_node.ErrorCount = value
	}
	if value, ok := cc.mutation.SuccessRate(); ok {
		_spec.SetField(channel.FieldSuccessRate, field.TypeFloat64, value)
		_node.SuccessRate = value
	}
	if value, ok := cc.mutation.TotalTokens(); ok {
		_spec.SetField(channel.FieldTotalTokens, field.TypeInt64, value)
		_node.TotalTokens = value
	}
	if value, ok := cc.mutation.AvgResponseTime(); ok {
		_spec.SetField(channel.FieldAvgResponseTime, field.TypeFloat64, value)
		_node.AvgResponseTime = value
	}
	return _node, _spec
}

// ChannelCreateBulk is the builder for creating many Channel entities in bulk.
type ChannelCreateBulk struct {
	config
	err      error
	builders []*ChannelCreate
}

// Save creates the Channel entities in the database.
func (ccb *ChannelCreateBulk) Save(ctx context.Context) ([]*Channel, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Channel, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChannelCreateBulk) SaveX(ctx context.Context) []*Channel {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChannelCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
