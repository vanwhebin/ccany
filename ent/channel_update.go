// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/channel"
	"ccany/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ChannelUpdate) SetName(s string) *ChannelUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetProvider sets the "provider" field.
func (cu *ChannelUpdate) SetProvider(s string) *ChannelUpdate {
	cu.mutation.SetProvider(s)
	return cu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableProvider(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetProvider(*s)
	}
	return cu
}

// SetBaseURL sets the "base_url" field.
func (cu *ChannelUpdate) SetBaseURL(s string) *ChannelUpdate {
	cu.mutation.SetBaseURL(s)
	return cu
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableBaseURL(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetBaseURL(*s)
	}
	return cu
}

// SetAPIKey sets the "api_key" field.
func (cu *ChannelUpdate) SetAPIKey(s string) *ChannelUpdate {
	cu.mutation.SetAPIKey(s)
	return cu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableAPIKey(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetAPIKey(*s)
	}
	return cu
}

// SetCustomKey sets the "custom_key" field.
func (cu *ChannelUpdate) SetCustomKey(s string) *ChannelUpdate {
	cu.mutation.SetCustomKey(s)
	return cu
}

// SetNillableCustomKey sets the "custom_key" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableCustomKey(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetCustomKey(*s)
	}
	return cu
}

// SetTimeout sets the "timeout" field.
func (cu *ChannelUpdate) SetTimeout(i int) *ChannelUpdate {
	cu.mutation.ResetTimeout()
	cu.mutation.SetTimeout(i)
	return cu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableTimeout(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetTimeout(*i)
	}
	return cu
}

// AddTimeout adds i to the "timeout" field.
func (cu *ChannelUpdate) AddTimeout(i int) *ChannelUpdate {
	cu.mutation.AddTimeout(i)
	return cu
}

// SetMaxRetries sets the "max_retries" field.
func (cu *ChannelUpdate) SetMaxRetries(i int) *ChannelUpdate {
	cu.mutation.ResetMaxRetries()
	cu.mutation.SetMaxRetries(i)
	return cu
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMaxRetries(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetMaxRetries(*i)
	}
	return cu
}

// AddMaxRetries adds i to the "max_retries" field.
func (cu *ChannelUpdate) AddMaxRetries(i int) *ChannelUpdate {
	cu.mutation.AddMaxRetries(i)
	return cu
}

// SetEnabled sets the "enabled" field.
func (cu *ChannelUpdate) SetEnabled(b bool) *ChannelUpdate {
	cu.mutation.SetEnabled(b)
	return cu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableEnabled(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetEnabled(*b)
	}
	return cu
}

// SetWeight sets the "weight" field.
func (cu *ChannelUpdate) SetWeight(i int) *ChannelUpdate {
	cu.mutation.ResetWeight()
	cu.mutation.SetWeight(i)
	return cu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableWeight(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetWeight(*i)
	}
	return cu
}

// AddWeight adds i to the "weight" field.
func (cu *ChannelUpdate) AddWeight(i int) *ChannelUpdate {
	cu.mutation.AddWeight(i)
	return cu
}

// SetPriority sets the "priority" field.
func (cu *ChannelUpdate) SetPriority(i int) *ChannelUpdate {
	cu.mutation.ResetPriority()
	cu.mutation.SetPriority(i)
	return cu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillablePriority(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetPriority(*i)
	}
	return cu
}

// AddPriority adds i to the "priority" field.
func (cu *ChannelUpdate) AddPriority(i int) *ChannelUpdate {
	cu.mutation.AddPriority(i)
	return cu
}

// SetModelsMapping sets the "models_mapping" field.
func (cu *ChannelUpdate) SetModelsMapping(m map[string]string) *ChannelUpdate {
	cu.mutation.SetModelsMapping(m)
	return cu
}

// ClearModelsMapping clears the value of the "models_mapping" field.
func (cu *ChannelUpdate) ClearModelsMapping() *ChannelUpdate {
	cu.mutation.ClearModelsMapping()
	return cu
}

// SetCapabilities sets the "capabilities" field.
func (cu *ChannelUpdate) SetCapabilities(m map[string]interface{}) *ChannelUpdate {
	cu.mutation.SetCapabilities(m)
	return cu
}

// ClearCapabilities clears the value of the "capabilities" field.
func (cu *ChannelUpdate) ClearCapabilities() *ChannelUpdate {
	cu.mutation.ClearCapabilities()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChannelUpdate) SetUpdatedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetLastUsedAt sets the "last_used_at" field.
func (cu *ChannelUpdate) SetLastUsedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetLastUsedAt(t)
	return cu
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableLastUsedAt(t *time.Time) *ChannelUpdate {
	if t != nil {
		cu.SetLastUsedAt(*t)
	}
	return cu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (cu *ChannelUpdate) ClearLastUsedAt() *ChannelUpdate {
	cu.mutation.ClearLastUsedAt()
	return cu
}

// SetRequestCount sets the "request_count" field.
func (cu *ChannelUpdate) SetRequestCount(i int64) *ChannelUpdate {
	cu.mutation.ResetRequestCount()
	cu.mutation.SetRequestCount(i)
	return cu
}

// SetNillableRequestCount sets the "request_count" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableRequestCount(i *int64) *ChannelUpdate {
	if i != nil {
		cu.SetRequestCount(*i)
	}
	return cu
}

// AddRequestCount adds i to the "request_count" field.
func (cu *ChannelUpdate) AddRequestCount(i int64) *ChannelUpdate {
	cu.mutation.AddRequestCount(i)
	return cu
}

// SetErrorCount sets the "error_count" field.
func (cu *ChannelUpdate) SetErrorCount(i int64) *ChannelUpdate {
	cu.mutation.ResetErrorCount()
	cu.mutation.SetErrorCount(i)
	return cu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableErrorCount(i *int64) *ChannelUpdate {
	if i != nil {
		cu.SetErrorCount(*i)
	}
	return cu
}

// AddErrorCount adds i to the "error_count" field.
func (cu *ChannelUpdate) AddErrorCount(i int64) *ChannelUpdate {
	cu.mutation.AddErrorCount(i)
	return cu
}

// SetSuccessRate sets the "success_rate" field.
func (cu *ChannelUpdate) SetSuccessRate(f float64) *ChannelUpdate {
	cu.mutation.ResetSuccessRate()
	cu.mutation.SetSuccessRate(f)
	return cu
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableSuccessRate(f *float64) *ChannelUpdate {
	if f != nil {
		cu.SetSuccessRate(*f)
	}
	return cu
}

// AddSuccessRate adds f to the "success_rate" field.
func (cu *ChannelUpdate) AddSuccessRate(f float64) *ChannelUpdate {
	cu.mutation.AddSuccessRate(f)
	return cu
}

// SetTotalTokens sets the "total_tokens" field.
func (cu *ChannelUpdate) SetTotalTokens(i int64) *ChannelUpdate {
	cu.mutation.ResetTotalTokens()
	cu.mutation.SetTotalTokens(i)
	return cu
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableTotalTokens(i *int64) *ChannelUpdate {
	if i != nil {
		cu.SetTotalTokens(*i)
	}
	return cu
}

// AddTotalTokens adds i to the "total_tokens" field.
func (cu *ChannelUpdate) AddTotalTokens(i int64) *ChannelUpdate {
	cu.mutation.AddTotalTokens(i)
	return cu
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (cu *ChannelUpdate) SetAvgResponseTime(f float64) *ChannelUpdate {
	cu.mutation.ResetAvgResponseTime()
	cu.mutation.SetAvgResponseTime(f)
	return cu
}

// SetNillableAvgResponseTime sets the "avg_response_time" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableAvgResponseTime(f *float64) *ChannelUpdate {
	if f != nil {
		cu.SetAvgResponseTime(*f)
	}
	return cu
}

// AddAvgResponseTime adds f to the "avg_response_time" field.
func (cu *ChannelUpdate) AddAvgResponseTime(f float64) *ChannelUpdate {
	cu.mutation.AddAvgResponseTime(f)
	return cu
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChannelUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := channel.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Provider(); ok {
		_spec.SetField(channel.FieldProvider, field.TypeString, value)
	}
	if value, ok := cu.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cu.mutation.CustomKey(); ok {
		_spec.SetField(channel.FieldCustomKey, field.TypeString, value)
	}
	if value, ok := cu.mutation.Timeout(); ok {
		_spec.SetField(channel.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTimeout(); ok {
		_spec.AddField(channel.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MaxRetries(); ok {
		_spec.SetField(channel.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxRetries(); ok {
		_spec.AddField(channel.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Enabled(); ok {
		_spec.SetField(channel.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Weight(); ok {
		_spec.SetField(channel.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWeight(); ok {
		_spec.AddField(channel.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Priority(); ok {
		_spec.SetField(channel.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPriority(); ok {
		_spec.AddField(channel.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ModelsMapping(); ok {
		_spec.SetField(channel.FieldModelsMapping, field.TypeJSON, value)
	}
	if cu.mutation.ModelsMappingCleared() {
		_spec.ClearField(channel.FieldModelsMapping, field.TypeJSON)
	}
	if value, ok := cu.mutation.Capabilities(); ok {
		_spec.SetField(channel.FieldCapabilities, field.TypeJSON, value)
	}
	if cu.mutation.CapabilitiesCleared() {
		_spec.ClearField(channel.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.LastUsedAt(); ok {
		_spec.SetField(channel.FieldLastUsedAt, field.TypeTime, value)
	}
	if cu.mutation.LastUsedAtCleared() {
		_spec.ClearField(channel.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.RequestCount(); ok {
		_spec.SetField(channel.FieldRequestCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedRequestCount(); ok {
		_spec.AddField(channel.FieldRequestCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.ErrorCount(); ok {
		_spec.SetField(channel.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedErrorCount(); ok {
		_spec.AddField(channel.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.SuccessRate(); ok {
		_spec.SetField(channel.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedSuccessRate(); ok {
		_spec.AddField(channel.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.TotalTokens(); ok {
		_spec.SetField(channel.FieldTotalTokens, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTotalTokens(); ok {
		_spec.AddField(channel.FieldTotalTokens, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AvgResponseTime(); ok {
		_spec.SetField(channel.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedAvgResponseTime(); ok {
		_spec.AddField(channel.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMutation
}

// SetName sets the "name" field.
func (cuo *ChannelUpdateOne) SetName(s string) *ChannelUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetProvider sets the "provider" field.
func (cuo *ChannelUpdateOne) SetProvider(s string) *ChannelUpdateOne {
	cuo.mutation.SetProvider(s)
	return cuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableProvider(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetProvider(*s)
	}
	return cuo
}

// SetBaseURL sets the "base_url" field.
func (cuo *ChannelUpdateOne) SetBaseURL(s string) *ChannelUpdateOne {
	cuo.mutation.SetBaseURL(s)
	return cuo
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableBaseURL(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetBaseURL(*s)
	}
	return cuo
}

// SetAPIKey sets the "api_key" field.
func (cuo *ChannelUpdateOne) SetAPIKey(s string) *ChannelUpdateOne {
	cuo.mutation.SetAPIKey(s)
	return cuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableAPIKey(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetAPIKey(*s)
	}
	return cuo
}

// SetCustomKey sets the "custom_key" field.
func (cuo *ChannelUpdateOne) SetCustomKey(s string) *ChannelUpdateOne {
	cuo.mutation.SetCustomKey(s)
	return cuo
}

// SetNillableCustomKey sets the "custom_key" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableCustomKey(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetCustomKey(*s)
	}
	return cuo
}

// SetTimeout sets the "timeout" field.
func (cuo *ChannelUpdateOne) SetTimeout(i int) *ChannelUpdateOne {
	cuo.mutation.ResetTimeout()
	cuo.mutation.SetTimeout(i)
	return cuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableTimeout(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetTimeout(*i)
	}
	return cuo
}

// AddTimeout adds i to the "timeout" field.
func (cuo *ChannelUpdateOne) AddTimeout(i int) *ChannelUpdateOne {
	cuo.mutation.AddTimeout(i)
	return cuo
}

// SetMaxRetries sets the "max_retries" field.
func (cuo *ChannelUpdateOne) SetMaxRetries(i int) *ChannelUpdateOne {
	cuo.mutation.ResetMaxRetries()
	cuo.mutation.SetMaxRetries(i)
	return cuo
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMaxRetries(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMaxRetries(*i)
	}
	return cuo
}

// AddMaxRetries adds i to the "max_retries" field.
func (cuo *ChannelUpdateOne) AddMaxRetries(i int) *ChannelUpdateOne {
	cuo.mutation.AddMaxRetries(i)
	return cuo
}

// SetEnabled sets the "enabled" field.
func (cuo *ChannelUpdateOne) SetEnabled(b bool) *ChannelUpdateOne {
	cuo.mutation.SetEnabled(b)
	return cuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableEnabled(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetEnabled(*b)
	}
	return cuo
}

// SetWeight sets the "weight" field.
func (cuo *ChannelUpdateOne) SetWeight(i int) *ChannelUpdateOne {
	cuo.mutation.ResetWeight()
	cuo.mutation.SetWeight(i)
	return cuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableWeight(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetWeight(*i)
	}
	return cuo
}

// AddWeight adds i to the "weight" field.
func (cuo *ChannelUpdateOne) AddWeight(i int) *ChannelUpdateOne {
	cuo.mutation.AddWeight(i)
	return cuo
}

// SetPriority sets the "priority" field.
func (cuo *ChannelUpdateOne) SetPriority(i int) *ChannelUpdateOne {
	cuo.mutation.ResetPriority()
	cuo.mutation.SetPriority(i)
	return cuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillablePriority(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetPriority(*i)
	}
	return cuo
}

// AddPriority adds i to the "priority" field.
func (cuo *ChannelUpdateOne) AddPriority(i int) *ChannelUpdateOne {
	cuo.mutation.AddPriority(i)
	return cuo
}

// SetModelsMapping sets the "models_mapping" field.
func (cuo *ChannelUpdateOne) SetModelsMapping(m map[string]string) *ChannelUpdateOne {
	cuo.mutation.SetModelsMapping(m)
	return cuo
}

// ClearModelsMapping clears the value of the "models_mapping" field.
func (cuo *ChannelUpdateOne) ClearModelsMapping() *ChannelUpdateOne {
	cuo.mutation.ClearModelsMapping()
	return cuo
}

// SetCapabilities sets the "capabilities" field.
func (cuo *ChannelUpdateOne) SetCapabilities(m map[string]interface{}) *ChannelUpdateOne {
	cuo.mutation.SetCapabilities(m)
	return cuo
}

// ClearCapabilities clears the value of the "capabilities" field.
func (cuo *ChannelUpdateOne) ClearCapabilities() *ChannelUpdateOne {
	cuo.mutation.ClearCapabilities()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChannelUpdateOne) SetUpdatedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (cuo *ChannelUpdateOne) SetLastUsedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetLastUsedAt(t)
	return cuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableLastUsedAt(t *time.Time) *ChannelUpdateOne {
	if t != nil {
		cuo.SetLastUsedAt(*t)
	}
	return cuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (cuo *ChannelUpdateOne) ClearLastUsedAt() *ChannelUpdateOne {
	cuo.mutation.ClearLastUsedAt()
	return cuo
}

// SetRequestCount sets the "request_count" field.
func (cuo *ChannelUpdateOne) SetRequestCount(i int64) *ChannelUpdateOne {
	cuo.mutation.ResetRequestCount()
	cuo.mutation.SetRequestCount(i)
	return cuo
}

// SetNillableRequestCount sets the "request_count" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableRequestCount(i *int64) *ChannelUpdateOne {
	if i != nil {
		cuo.SetRequestCount(*i)
	}
	return cuo
}

// AddRequestCount adds i to the "request_count" field.
func (cuo *ChannelUpdateOne) AddRequestCount(i int64) *ChannelUpdateOne {
	cuo.mutation.AddRequestCount(i)
	return cuo
}

// SetErrorCount sets the "error_count" field.
func (cuo *ChannelUpdateOne) SetErrorCount(i int64) *ChannelUpdateOne {
	cuo.mutation.ResetErrorCount()
	cuo.mutation.SetErrorCount(i)
	return cuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableErrorCount(i *int64) *ChannelUpdateOne {
	if i != nil {
		cuo.SetErrorCount(*i)
	}
	return cuo
}

// AddErrorCount adds i to the "error_count" field.
func (cuo *ChannelUpdateOne) AddErrorCount(i int64) *ChannelUpdateOne {
	cuo.mutation.AddErrorCount(i)
	return cuo
}

// SetSuccessRate sets the "success_rate" field.
func (cuo *ChannelUpdateOne) SetSuccessRate(f float64) *ChannelUpdateOne {
	cuo.mutation.ResetSuccessRate()
	cuo.mutation.SetSuccessRate(f)
	return cuo
}

// SetNillableSuccessRate sets the "success_rate" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableSuccessRate(f *float64) *ChannelUpdateOne {
	if f != nil {
		cuo.SetSuccessRate(*f)
	}
	return cuo
}

// AddSuccessRate adds f to the "success_rate" field.
func (cuo *ChannelUpdateOne) AddSuccessRate(f float64) *ChannelUpdateOne {
	cuo.mutation.AddSuccessRate(f)
	return cuo
}

// SetTotalTokens sets the "total_tokens" field.
func (cuo *ChannelUpdateOne) SetTotalTokens(i int64) *ChannelUpdateOne {
	cuo.mutation.ResetTotalTokens()
	cuo.mutation.SetTotalTokens(i)
	return cuo
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableTotalTokens(i *int64) *ChannelUpdateOne {
	if i != nil {
		cuo.SetTotalTokens(*i)
	}
	return cuo
}

// AddTotalTokens adds i to the "total_tokens" field.
func (cuo *ChannelUpdateOne) AddTotalTokens(i int64) *ChannelUpdateOne {
	cuo.mutation.AddTotalTokens(i)
	return cuo
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (cuo *ChannelUpdateOne) SetAvgResponseTime(f float64) *ChannelUpdateOne {
	cuo.mutation.ResetAvgResponseTime()
	cuo.mutation.SetAvgResponseTime(f)
	return cuo
}

// SetNillableAvgResponseTime sets the "avg_response_time" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableAvgResponseTime(f *float64) *ChannelUpdateOne {
	if f != nil {
		cuo.SetAvgResponseTime(*f)
	}
	return cuo
}

// AddAvgResponseTime adds f to the "avg_response_time" field.
func (cuo *ChannelUpdateOne) AddAvgResponseTime(f float64) *ChannelUpdateOne {
	cuo.mutation.AddAvgResponseTime(f)
	return cuo
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cuo *ChannelUpdateOne) Where(ps ...predicate.Channel) *ChannelUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChannelUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := channel.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Provider(); ok {
		_spec.SetField(channel.FieldProvider, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CustomKey(); ok {
		_spec.SetField(channel.FieldCustomKey, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Timeout(); ok {
		_spec.SetField(channel.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTimeout(); ok {
		_spec.AddField(channel.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MaxRetries(); ok {
		_spec.SetField(channel.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxRetries(); ok {
		_spec.AddField(channel.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Enabled(); ok {
		_spec.SetField(channel.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Weight(); ok {
		_spec.SetField(channel.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWeight(); ok {
		_spec.AddField(channel.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Priority(); ok {
		_spec.SetField(channel.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPriority(); ok {
		_spec.AddField(channel.FieldPriority, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ModelsMapping(); ok {
		_spec.SetField(channel.FieldModelsMapping, field.TypeJSON, value)
	}
	if cuo.mutation.ModelsMappingCleared() {
		_spec.ClearField(channel.FieldModelsMapping, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Capabilities(); ok {
		_spec.SetField(channel.FieldCapabilities, field.TypeJSON, value)
	}
	if cuo.mutation.CapabilitiesCleared() {
		_spec.ClearField(channel.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.LastUsedAt(); ok {
		_spec.SetField(channel.FieldLastUsedAt, field.TypeTime, value)
	}
	if cuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(channel.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.RequestCount(); ok {
		_spec.SetField(channel.FieldRequestCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedRequestCount(); ok {
		_spec.AddField(channel.FieldRequestCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.ErrorCount(); ok {
		_spec.SetField(channel.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(channel.FieldErrorCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.SuccessRate(); ok {
		_spec.SetField(channel.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedSuccessRate(); ok {
		_spec.AddField(channel.FieldSuccessRate, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.TotalTokens(); ok {
		_spec.SetField(channel.FieldTotalTokens, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTotalTokens(); ok {
		_spec.AddField(channel.FieldTotalTokens, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AvgResponseTime(); ok {
		_spec.SetField(channel.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedAvgResponseTime(); ok {
		_spec.AddField(channel.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
